Задача 1



Реализация проверки уникальности email при регистрации



Создание маршрута регистрации:



Создайте маршрут `POST /register`, который будет принимать данные пользователя, включая email и пароль.



Проверка уникальности email:



В этом маршруте перед регистрацией пользователя проверьте, существует ли уже в базе данных пользователь с таким email.



Возврат ошибки при повторном email:



Если такой email уже существует, верните ошибку, сообщив пользователю, что email уже зарегистрирован.



Регистрация нового пользователя:



Если email уникален, продолжайте регистрацию, хэшируя пароль с помощью `bcrypt`.

Создание маршрута логин:



Создайте маршрут `POST /login`, который будет принимать данные пользователя, включая email и пароль.



Задача 2



Реализация принудительного обновления пароля



Добавление поля для проверки необходимости смены пароля:



В модель пользователя добавьте поле `mustChangePassword` (булевое значение), которое будет указывать, должен ли пользователь сменить пароль при следующем входе.



Создание middleware для проверки необходимости смены пароля:



Создайте middleware, которое будет проверять значение `mustChangePassword` при каждом входе пользователя. Если это значение равно `true`, перенаправляйте пользователя на страницу смены пароля.



Создание маршрута для смены пароля:



Создайте маршрут `POST /change-password`, который будет принимать новый пароль и обновлять его в базе данных, предварительно хэшируя с помощью `bcrypt`. После успешной смены пароля установите `mustChangePassword` в `false`.



Задача 3



Реализация функции удаления аккаунта



Создание маршрута для удаления аккаунта:



Создайте маршрут `POST /delete-account`, который будет доступен только авторизованным пользователям.



Подтверждение пароля перед удалением аккаунта:



В этом маршруте попросите пользователя ввести текущий пароль. Проверьте введенный пароль с помощью `bcrypt.compare`.



Удаление аккаунта:



Если пароль подтвержден, удалите учетную запись пользователя из базы данных. Если пароль неверен, верните ошибку



Создание маршрута для обновления email:



Создайте маршрут `/update-email`, который будет защищен с помощью JWT. Добавьте middleware для проверки токена (например, `authenticateJWT`).

В этом маршруте обработайте POST или PUT запросы, где пользователь будет передавать новый email в теле запроса.

Найдите пользователя в массиве на основе `id` из токена и обновите его email.



Обработка ошибок и успешного обновления:



Если пользователь найден и email успешно обновлён, верните ответ с обновленными данными.

Если пользователь не найден или произошла ошибка, верните соответствующее сообщение об ошибке.



Создание маршрута для обновления роли:



Создайте маршрут `/update-role`, который будет доступен только администраторам.

Используйте middleware для проверки роли пользователя (например, `authorizeRole`), чтобы ограничить доступ к этому маршруту только администраторам.



Обновление роли пользователя:



В теле запроса передавайте ID пользователя и новую роль.

Найдите этого пользователя в массиве на основе ID и обновите его роль.



Обработка ошибок и успешного выполнения:



Если роль успешно обновлена, верните сообщение об успешном выполнении операции.

Если произошла ошибка (например, пользователь не найден), верните сообщение об ошибке.

Создание маршрута для обновления токена:



Создайте новый маршрут `/refresh-token`, который будет защищен JWT.

Внутри этого маршрута извлеките текущий токен пользователя из заголовка запроса.



Проверка токена и создание нового:



Проверьте, что токен валиден. Если токен просрочен, верните ошибку.

Если токен действителен, создайте новый JWT токен для пользователя и верните его в ответе.



Обработка ошибок:



Если токен неверен или отсутствует, верните сообщение об ошибке.

Убедитесь, что маршруты корректно реагируют на обновленный токен.

